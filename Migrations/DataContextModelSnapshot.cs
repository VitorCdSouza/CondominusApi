// <auto-generated />
using System;
using CondominusApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CondominusApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CondominusApi.Models.Apartamento", b =>
                {
                    b.Property<int>("IdApart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdApart"));

                    b.Property<int>("IdCondominioApart")
                        .HasColumnType("int");

                    b.Property<string>("NumeroApart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelefoneApart")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdApart");

                    b.HasIndex("IdCondominioApart");

                    b.ToTable("Apartamentos");

                    b.HasData(
                        new
                        {
                            IdApart = 1,
                            IdCondominioApart = 1,
                            NumeroApart = "A001",
                            TelefoneApart = "11912345678"
                        },
                        new
                        {
                            IdApart = 2,
                            IdCondominioApart = 1,
                            NumeroApart = "B002",
                            TelefoneApart = "11912345678"
                        },
                        new
                        {
                            IdApart = 3,
                            IdCondominioApart = 1,
                            NumeroApart = "C003",
                            TelefoneApart = "11887654321"
                        });
                });

            modelBuilder.Entity("CondominusApi.Models.AreaComum", b =>
                {
                    b.Property<int>("IdAreaComum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAreaComum"));

                    b.Property<string>("NomeAreaComum")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAreaComum");

                    b.ToTable("AreasComuns");

                    b.HasData(
                        new
                        {
                            IdAreaComum = 1,
                            NomeAreaComum = "Churrasqueira"
                        },
                        new
                        {
                            IdAreaComum = 2,
                            NomeAreaComum = "Salão de Jogos"
                        },
                        new
                        {
                            IdAreaComum = 3,
                            NomeAreaComum = "Quadra"
                        });
                });

            modelBuilder.Entity("CondominusApi.Models.Condominio", b =>
                {
                    b.Property<int>("IdCond")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCond"));

                    b.Property<string>("EnderecoCond")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeCond")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCond");

                    b.ToTable("Condominios");

                    b.HasData(
                        new
                        {
                            IdCond = 1,
                            EnderecoCond = "Rua Guaranésia, 1070",
                            NomeCond = "Vila Nova Maria"
                        },
                        new
                        {
                            IdCond = 2,
                            EnderecoCond = "Rua Paulo Andrighetti, 1573",
                            NomeCond = "Condomínio Aquarella Pari Colore"
                        },
                        new
                        {
                            IdCond = 3,
                            EnderecoCond = "Rua Paulo Andrighetti, 449",
                            NomeCond = "Condomínio Edifício Antônio Walter Santiago"
                        });
                });

            modelBuilder.Entity("CondominusApi.Models.Dependente", b =>
                {
                    b.Property<int>("IdDependente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDependente"));

                    b.Property<string>("CpfDependente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdPessoaDependente")
                        .HasColumnType("int");

                    b.Property<string>("NomeDependente")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDependente");

                    b.HasIndex("IdPessoaDependente");

                    b.ToTable("Dependentes");

                    b.HasData(
                        new
                        {
                            IdDependente = 1,
                            CpfDependente = "11242100083",
                            IdPessoaDependente = 1,
                            NomeDependente = "João Gomes"
                        },
                        new
                        {
                            IdDependente = 2,
                            CpfDependente = "30777454025",
                            IdPessoaDependente = 1,
                            NomeDependente = "Maria Silva"
                        },
                        new
                        {
                            IdDependente = 3,
                            CpfDependente = "53086593032",
                            IdPessoaDependente = 2,
                            NomeDependente = "Carlos Oliveira"
                        },
                        new
                        {
                            IdDependente = 4,
                            CpfDependente = "54710630070",
                            IdPessoaDependente = 3,
                            NomeDependente = "Ana Souza"
                        },
                        new
                        {
                            IdDependente = 5,
                            CpfDependente = "03940474002",
                            IdPessoaDependente = 3,
                            NomeDependente = "Pedro Santos"
                        });
                });

            modelBuilder.Entity("CondominusApi.Models.Entrega", b =>
                {
                    b.Property<int>("IdEnt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEnt"));

                    b.Property<string>("CodEnt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DataEntregaEnt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataRetiradaEnt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinatarioEnt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdApartamentoEnt")
                        .HasColumnType("int");

                    b.HasKey("IdEnt");

                    b.HasIndex("IdApartamentoEnt");

                    b.ToTable("Entregas");

                    b.HasData(
                        new
                        {
                            IdEnt = 1,
                            CodEnt = "NBR1354897",
                            DataEntregaEnt = new DateTime(2023, 12, 4, 16, 52, 49, 642, DateTimeKind.Local).AddTicks(8709),
                            DataRetiradaEnt = new DateTime(2023, 12, 5, 16, 52, 49, 642, DateTimeKind.Local).AddTicks(8724),
                            DestinatarioEnt = "Joao Guilherme",
                            IdApartamentoEnt = 1
                        },
                        new
                        {
                            IdEnt = 2,
                            CodEnt = "NBR2468135",
                            DataEntregaEnt = new DateTime(2023, 12, 4, 16, 52, 49, 642, DateTimeKind.Local).AddTicks(8730),
                            DataRetiradaEnt = new DateTime(2023, 12, 6, 16, 52, 49, 642, DateTimeKind.Local).AddTicks(8731),
                            DestinatarioEnt = "Maria Joaquina",
                            IdApartamentoEnt = 2
                        },
                        new
                        {
                            IdEnt = 3,
                            CodEnt = "NBR3581415",
                            DataEntregaEnt = new DateTime(2023, 12, 4, 16, 52, 49, 642, DateTimeKind.Local).AddTicks(8733),
                            DataRetiradaEnt = new DateTime(2023, 12, 5, 16, 52, 49, 642, DateTimeKind.Local).AddTicks(8733),
                            DestinatarioEnt = "Ana Clara",
                            IdApartamentoEnt = 3
                        });
                });

            modelBuilder.Entity("CondominusApi.Models.Notificacao", b =>
                {
                    b.Property<int>("IdNotificacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNotificacao"));

                    b.Property<string>("AssuntoNotificacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataEnvioNotificacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPessoaNotificacao")
                        .HasColumnType("int");

                    b.Property<string>("MensagemNotificacao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdNotificacao");

                    b.ToTable("Notificacoes");

                    b.HasData(
                        new
                        {
                            IdNotificacao = 1,
                            AssuntoNotificacao = "Manutenção elétrica",
                            DataEnvioNotificacao = new DateTime(2023, 12, 6, 9, 13, 22, 0, DateTimeKind.Unspecified),
                            IdPessoaNotificacao = 0,
                            MensagemNotificacao = "Haverá manutencão no quadro de força do prédio, dia: 20/12 as 14 horas"
                        });
                });

            modelBuilder.Entity("CondominusApi.Models.Pessoa", b =>
                {
                    b.Property<int>("IdPessoa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPessoa"));

                    b.Property<string>("CpfPessoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdApartamentoPessoa")
                        .HasColumnType("int");

                    b.Property<int?>("IdUsuarioPessoa")
                        .HasColumnType("int");

                    b.Property<string>("NomePessoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelefonePessoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoPessoa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPessoa");

                    b.HasIndex("IdApartamentoPessoa");

                    b.ToTable("Pessoas");

                    b.HasData(
                        new
                        {
                            IdPessoa = 1,
                            CpfPessoa = "56751898901",
                            IdApartamentoPessoa = 1,
                            NomePessoa = "João Gomes",
                            TelefonePessoa = "11924316523",
                            TipoPessoa = "Admin"
                        },
                        new
                        {
                            IdPessoa = 2,
                            CpfPessoa = "89674156892",
                            IdApartamentoPessoa = 2,
                            NomePessoa = "Maria Oliveira",
                            TelefonePessoa = "1198254351",
                            TipoPessoa = "Morador"
                        },
                        new
                        {
                            IdPessoa = 3,
                            CpfPessoa = "32569874561",
                            IdApartamentoPessoa = 3,
                            NomePessoa = "João Viana",
                            TelefonePessoa = "11984512345",
                            TipoPessoa = "Morador"
                        });
                });

            modelBuilder.Entity("CondominusApi.Models.PessoaAreaComum", b =>
                {
                    b.Property<int>("IdPessoaPessArea")
                        .HasColumnType("int");

                    b.Property<int>("IdAreaComumPessArea")
                        .HasColumnType("int");

                    b.Property<int>("IdPessArea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPessArea"));

                    b.Property<DateTime>("dataHoraFimPessArea")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dataHoraInicioPessArea")
                        .HasColumnType("datetime2");

                    b.HasKey("IdPessoaPessArea", "IdAreaComumPessArea");

                    b.HasIndex("IdAreaComumPessArea");

                    b.ToTable("PessoasAreasComuns");
                });

            modelBuilder.Entity("CondominusApi.Models.PessoaNoti", b =>
                {
                    b.Property<int>("IdPessoaPessoaNoti")
                        .HasColumnType("int");

                    b.Property<int>("IdNotificacaoPessoaNoti")
                        .HasColumnType("int");

                    b.Property<int>("IdPessoaNoti")
                        .HasColumnType("int");

                    b.HasKey("IdPessoaPessoaNoti", "IdNotificacaoPessoaNoti");

                    b.HasIndex("IdNotificacaoPessoaNoti");

                    b.ToTable("PessoaNotis");

                    b.HasData(
                        new
                        {
                            IdPessoaPessoaNoti = 1,
                            IdNotificacaoPessoaNoti = 1,
                            IdPessoaNoti = 1
                        });
                });

            modelBuilder.Entity("CondominusApi.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataAcessoUsuario")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailUsuario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdPessoaUsuario")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHashUsuario")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSaltUsuario")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            IdUsuario = 1,
                            EmailUsuario = "admin@gmail.com",
                            IdPessoaUsuario = 1,
                            PasswordHashUsuario = new byte[] { 232, 179, 122, 22, 7, 112, 236, 81, 30, 170, 55, 87, 242, 122, 254, 225, 112, 228, 182, 122, 75, 202, 100, 241, 248, 152, 74, 20, 21, 136, 26, 43, 116, 85, 204, 201, 101, 192, 106, 53, 116, 223, 60, 89, 63, 244, 160, 9, 37, 34, 41, 76, 228, 153, 39, 47, 215, 103, 188, 22, 2, 185, 104, 44 },
                            PasswordSaltUsuario = new byte[] { 195, 120, 245, 121, 241, 22, 63, 75, 234, 191, 11, 87, 14, 91, 81, 186, 161, 55, 199, 241, 62, 29, 67, 132, 118, 102, 40, 177, 67, 158, 211, 36, 26, 136, 194, 131, 253, 247, 39, 22, 230, 115, 113, 201, 231, 113, 113, 195, 230, 120, 65, 43, 118, 197, 52, 13, 218, 81, 24, 87, 86, 50, 42, 36, 229, 98, 217, 224, 20, 222, 68, 192, 95, 80, 24, 91, 100, 135, 225, 9, 61, 209, 124, 144, 208, 175, 124, 14, 168, 194, 35, 181, 6, 35, 160, 180, 82, 95, 177, 22, 167, 61, 86, 73, 212, 101, 35, 226, 191, 225, 43, 245, 24, 98, 101, 78, 163, 84, 38, 66, 181, 154, 41, 148, 99, 161, 85, 170 }
                        });
                });

            modelBuilder.Entity("CondominusApi.Models.Apartamento", b =>
                {
                    b.HasOne("CondominusApi.Models.Condominio", "CondominioApart")
                        .WithMany("ApartamentosCond")
                        .HasForeignKey("IdCondominioApart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CondominioApart");
                });

            modelBuilder.Entity("CondominusApi.Models.Dependente", b =>
                {
                    b.HasOne("CondominusApi.Models.Pessoa", "PessoaDependente")
                        .WithMany("DependentesPessoa")
                        .HasForeignKey("IdPessoaDependente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PessoaDependente");
                });

            modelBuilder.Entity("CondominusApi.Models.Entrega", b =>
                {
                    b.HasOne("CondominusApi.Models.Apartamento", "ApartamentoEnt")
                        .WithMany("EntregasApart")
                        .HasForeignKey("IdApartamentoEnt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApartamentoEnt");
                });

            modelBuilder.Entity("CondominusApi.Models.Pessoa", b =>
                {
                    b.HasOne("CondominusApi.Models.Apartamento", "ApartamentoPessoa")
                        .WithMany("PessoasApart")
                        .HasForeignKey("IdApartamentoPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApartamentoPessoa");
                });

            modelBuilder.Entity("CondominusApi.Models.PessoaAreaComum", b =>
                {
                    b.HasOne("CondominusApi.Models.AreaComum", "AreaComumPessArea")
                        .WithMany("PessoaACAreaComum")
                        .HasForeignKey("IdAreaComumPessArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CondominusApi.Models.Pessoa", "PessoaPessArea")
                        .WithMany("PessoaACPessoa")
                        .HasForeignKey("IdPessoaPessArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaComumPessArea");

                    b.Navigation("PessoaPessArea");
                });

            modelBuilder.Entity("CondominusApi.Models.PessoaNoti", b =>
                {
                    b.HasOne("CondominusApi.Models.Notificacao", "NotificacaoPessoaNoti")
                        .WithMany("PessoasNotificacoes")
                        .HasForeignKey("IdNotificacaoPessoaNoti")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CondominusApi.Models.Pessoa", "PessoaPessoaNoti")
                        .WithMany("PessoaNotiPessoa")
                        .HasForeignKey("IdPessoaPessoaNoti")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificacaoPessoaNoti");

                    b.Navigation("PessoaPessoaNoti");
                });

            modelBuilder.Entity("CondominusApi.Models.Usuario", b =>
                {
                    b.HasOne("CondominusApi.Models.Pessoa", "PessoaUsuario")
                        .WithOne("UsuarioPessoa")
                        .HasForeignKey("CondominusApi.Models.Usuario", "IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PessoaUsuario");
                });

            modelBuilder.Entity("CondominusApi.Models.Apartamento", b =>
                {
                    b.Navigation("EntregasApart");

                    b.Navigation("PessoasApart");
                });

            modelBuilder.Entity("CondominusApi.Models.AreaComum", b =>
                {
                    b.Navigation("PessoaACAreaComum");
                });

            modelBuilder.Entity("CondominusApi.Models.Condominio", b =>
                {
                    b.Navigation("ApartamentosCond");
                });

            modelBuilder.Entity("CondominusApi.Models.Notificacao", b =>
                {
                    b.Navigation("PessoasNotificacoes");
                });

            modelBuilder.Entity("CondominusApi.Models.Pessoa", b =>
                {
                    b.Navigation("DependentesPessoa");

                    b.Navigation("PessoaACPessoa");

                    b.Navigation("PessoaNotiPessoa");

                    b.Navigation("UsuarioPessoa");
                });
#pragma warning restore 612, 618
        }
    }
}
